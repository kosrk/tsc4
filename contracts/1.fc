{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

;; list ver 5.396566123952745

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

;; cell check_hash(int hash, cell c) inline {
;;   if c.cell_hash() == hash {
;;     return c;
;;   }
;;   slice s = c.begin_parse();
;;   repeat (s.slice_refs()) {
;;     return check_hash(hash, s~load_ref());
;;   }
;;   return begin_cell().end_cell();
;; }

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {

  if tree.cell_hash() == hash {
    return tree;
  }

  tuple stack = null();

  stack~push_back(tree.begin_parse());

  while (~ stack.is_null()) {

    slice s = stack~pop_back();

    repeat (s.slice_refs()) {

      cell c1 = s~load_ref();

      if c1.cell_hash() == hash {
        return c1;
      }

      slice s1 = c1.begin_parse();
      if s1.slice_refs() != 0 {
        stack~push_back(s1);
      }

    }

  }
  return begin_cell().end_cell();
}
