{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

;; gas for simple fib N=370 K=1: 100090n
;; Problem #5:
;;         Compiled: true
;;         Passed Tests: true
;;         GasValue: 1688020
;;         Points: 5.436497050342439

() recv_internal() {
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

tuple solve(int k, int nl) asm
                                     ;; k nl
        " 0 INT 1 INT "              ;; k nl 0 1
        " SWAP2 "                    ;; 0 1 k nl
        " 1 INT OVER 1 INT "         ;; 0 1 k nl c=1 nl c=1
        " WHILE:<{ GREATER }>DO<{ "  ;; WHILE nl > c ;; 0 1 k nl c
        " s3 s4 PUSH2 "              ;; 0 1 k nl c 0 1
        " ADD "                      ;; 0 1 k nl c 0+1
        " 3 -ROLL "                  ;; 0 1 0+1 k nl c
        " INC "                      ;; 0 1 0+1 k nl c+1
        " DUP2 "                     ;; 0 1 0+1 k nl c+1 nl c+1
        " }> "                       ;; 0 1 0+1 k nl c+1
        " DROP2 "                    ;; 0 1 0+1 k
        " TUPLEVAR "                 ;; 0 t
        " 1 INT "                    ;; 0 t 1
        " ONLYTOPX "                 ;; t
        ;

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {

  int nl = n + k - 1;

  if (nl > 370) | (k == 0) {
    return empty_tuple();
  }

  if (n == 0) & (k == 1) {
    return to_tuple([0]);
  }

  return solve(k, nl);

}




