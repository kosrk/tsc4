{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

;; gas for simple fib N=370 K=1: 100090n
;; Problem #5:
;;         Compiled: true
;;         Passed Tests: true
;;         GasValue: 1725616
;;         Points: 5.428511900794607

() recv_internal() {
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

tuple simple_algo(int n, int k) inline {

;;   if (n + k > 371) | (k == 0) {
;;     return empty_tuple();
;;   }

  tuple res = empty_tuple();

  int i = 1;
  int prev = 1;
  int cur = 0;
  int x = 0;

  if n == 0 {
    res~tpush(0);
  }

  while (i < n) {
    (cur, prev) = (prev + cur, cur);
    i += 1;
  }

  while (i < n + k) {
    (cur, prev) = (prev + cur, cur);
    res~tpush(cur);
    i += 1;
  }

  return res;
}

;; tuple with_map(int n, int k) method_id {
;;
;;   if (n + k > 371) | (k == 0) {
;;     return empty_tuple();
;;   }
;;
;;   tuple res = empty_tuple();
;;
;;   if n  > 370 {
;;     tuple X = to_tuple([ 94611056096305838013295371573764256526437182762229865607320618320601813254535, 94611056096305838013295371573764256526437182762229865607320618320601813254535, 94611056096305838013295371573764256526437182762229865607320618320601813254535, 94611056096305838013295371573764256526437182762229865607320618320601813254535, 94611056096305838013295371573764256526437182762229865607320618320601813254535]);
;;     int i = 0;
;;     ;;     while (i < k) {
;;     res~tpush(X.at(n - 370 + i));
;;     ;;       i += 1;
;;     ;;     }
;;     ;;     return res;
;;   }
;;
;;   int i = 1;
;;   int prev = 1;
;;   int cur = 0;
;;   int x = 0;
;;
;;   if n == 0 {
;;     res~tpush(0);
;;   }
;;
;;   while (i < n) {
;;     (cur, prev) = (prev + cur, cur);
;;     i += 1;
;;   }
;;
;;   while (i < n + k) {
;;     (cur, prev) = (prev + cur, cur);
;;     res~tpush(cur);
;;     i += 1;
;;   }
;;
;;   return res;
;; }

const MOD = 1000000007;

(int, int) fast_doubling(int n) inline {

  if n == 0 {
    return (0, 1);
  }

  (int a, int b) = fast_doubling(n / 2);

  int c = 2 * b - a;

  if (c < 0) {
    c += MOD;
  }

  c = (a * c) % MOD;
  int d = (a * a + b * b) % MOD;
  if (n % 2 == 0) {
    return (c, d);
  }
  return (d, c + d);
}

(tuple) fibonacci_s (int n, int k) method_id {
;;   tuple x = simple_algo(40, 1);
;;   x~dump();
  return simple_algo(n, k);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {

  if (n + k > 371) | (k == 0) {
    return empty_tuple();
  }

  if (n < 45) {
    (int cur, int next) = fast_doubling(n);
    int i = 1;
    tuple res = to_tuple([cur]);

    while (i < k) {
      (cur, next) = (next, cur + next);
      res~tpush(cur);
      i += 1;
    }
    return res;
  } else {
    return simple_algo(n, k);
  }

}




