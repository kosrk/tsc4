{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

;; gas for simple fib N=370 K=1: 100090n
;; Problem #5:
;;         Compiled: true
;;         Passed Tests: true
;;         GasValue: 1688020
;;         Points: 5.436497050342439

() recv_internal() {
}

forall X -> (tuple) to_tuple (X x) asm "NOP";

;; tuple simple_algo(int n, int k) inline {
;;
;; ;;   if (n + k > 371) | (k == 0) {
;; ;;     return empty_tuple();
;; ;;   }
;;
;;   tuple res = empty_tuple();
;;
;;   int i = 1;
;;   int prev = 1;
;;   int cur = 0;
;;   int x = 0;
;;
;;   if n == 0 {
;;     res~tpush(0);
;;   }
;;
;;   while (i < n) {
;;     (cur, prev) = (prev + cur, cur);
;;     i += 1;
;;   }
;;
;;   while (i < n + k) {
;;     (cur, prev) = (prev + cur, cur);
;;     res~tpush(cur);
;;     i += 1;
;;   }
;;
;;   return res;
;; }



tuple with_map(int n, int k) inline {
  tuple res = empty_tuple();

  if n  >= 198 {

    tuple X = empty_tuple();

    X~tpush(107168651819712326877926895128666735145224);
    X~tpush(173402521172797813159685037284371942044301);
    X~tpush(280571172992510140037611932413038677189525);
    X~tpush(453973694165307953197296969697410619233826);
    X~tpush(734544867157818093234908902110449296423351);
    X~tpush(1188518561323126046432205871807859915657177);
    X~tpush(1923063428480944139667114773918309212080528);
    X~tpush(3111581989804070186099320645726169127737705);
    X~tpush(5034645418285014325766435419644478339818233);
    X~tpush(8146227408089084511865756065370647467555938);
    X~tpush(13180872826374098837632191485015125807374171);
    X~tpush(21327100234463183349497947550385773274930109);
    X~tpush(34507973060837282187130139035400899082304280);
    X~tpush(55835073295300465536628086585786672357234389);
    X~tpush(90343046356137747723758225621187571439538669);
    X~tpush(146178119651438213260386312206974243796773058);
    X~tpush(236521166007575960984144537828161815236311727);
    X~tpush(382699285659014174244530850035136059033084785);
    X~tpush(619220451666590135228675387863297874269396512);
    X~tpush(1001919737325604309473206237898433933302481297);
    X~tpush(1621140188992194444701881625761731807571877809);
    X~tpush(2623059926317798754175087863660165740874359106);
    X~tpush(4244200115309993198876969489421897548446236915);
    X~tpush(6867260041627791953052057353082063289320596021);
    X~tpush(11111460156937785151929026842503960837766832936);
    X~tpush(17978720198565577104981084195586024127087428957);
    X~tpush(29090180355503362256910111038089984964854261893);
    X~tpush(47068900554068939361891195233676009091941690850);
    X~tpush(76159080909572301618801306271765994056795952743);
    X~tpush(123227981463641240980692501505442003148737643593);
    X~tpush(199387062373213542599493807777207997205533596336);
    X~tpush(322615043836854783580186309282650000354271239929);
    X~tpush(522002106210068326179680117059857997559804836265);
    X~tpush(844617150046923109759866426342507997914076076194);
    X~tpush(1366619256256991435939546543402365995473880912459);
    X~tpush(2211236406303914545699412969744873993387956988653);
    X~tpush(3577855662560905981638959513147239988861837901112);
    X~tpush(5789092068864820527338372482892113982249794889765);
    X~tpush(9366947731425726508977331996039353971111632790877);
    X~tpush(15156039800290547036315704478931467953361427680642);
    X~tpush(24522987531716273545293036474970821924473060471519);
    X~tpush(39679027332006820581608740953902289877834488152161);
    X~tpush(64202014863723094126901777428873111802307548623680);
    X~tpush(103881042195729914708510518382775401680142036775841);
    X~tpush(168083057059453008835412295811648513482449585399521);
    X~tpush(271964099255182923543922814194423915162591622175362);
    X~tpush(440047156314635932379335110006072428645041207574883);
    X~tpush(712011255569818855923257924200496343807632829750245);
    X~tpush(1152058411884454788302593034206568772452674037325128);
    X~tpush(1864069667454273644225850958407065116260306867075373);
    X~tpush(3016128079338728432528443992613633888712980904400501);
    X~tpush(4880197746793002076754294951020699004973287771475874);
    X~tpush(7896325826131730509282738943634332893686268675876375);
    X~tpush(12776523572924732586037033894655031898659556447352249);
    X~tpush(20672849399056463095319772838289364792345825123228624);
    X~tpush(33449372971981195681356806732944396691005381570580873);
    X~tpush(54122222371037658776676579571233761483351206693809497);
    X~tpush(87571595343018854458033386304178158174356588264390370);
    X~tpush(141693817714056513234709965875411919657707794958199867);
    X~tpush(229265413057075367692743352179590077832064383222590237);
    X~tpush(370959230771131880927453318055001997489772178180790104);
    X~tpush(600224643828207248620196670234592075321836561403380341);
    X~tpush(971183874599339129547649988289594072811608739584170445);
    X~tpush(1571408518427546378167846658524186148133445300987550786);
    X~tpush(2542592393026885507715496646813780220945054040571721231);
    X~tpush(4114000911454431885883343305337966369078499341559272017);
    X~tpush(6656593304481317393598839952151746590023553382130993248);
    X~tpush(10770594215935749279482183257489712959102052723690265265);
    X~tpush(17427187520417066673081023209641459549125606105821258513);
    X~tpush(28197781736352815952563206467131172508227658829511523778);
    X~tpush(45624969256769882625644229676772632057353264935332782291);
    X~tpush(73822750993122698578207436143903804565580923764844306069);
    X~tpush(119447720249892581203851665820676436622934188700177088360);
    X~tpush(193270471243015279782059101964580241188515112465021394429);
    X~tpush(312718191492907860985910767785256677811449301165198482789);
    X~tpush(505988662735923140767969869749836918999964413630219877218);
    X~tpush(818706854228831001753880637535093596811413714795418360007);
    X~tpush(1324695516964754142521850507284930515811378128425638237225);
    X~tpush(2143402371193585144275731144820024112622791843221056597232);
    X~tpush(3468097888158339286797581652104954628434169971646694834457);
    X~tpush(5611500259351924431073312796924978741056961814867751431689);
    X~tpush(9079598147510263717870894449029933369491131786514446266146);
    X~tpush(14691098406862188148944207245954912110548093601382197697835);
    X~tpush(23770696554372451866815101694984845480039225387896643963981);
    X~tpush(38461794961234640015759308940939757590587318989278841661816);
    X~tpush(62232491515607091882574410635924603070626544377175485625797);
    X~tpush(100694286476841731898333719576864360661213863366454327287613);
    X~tpush(162926777992448823780908130212788963731840407743629812913410);
    X~tpush(263621064469290555679241849789653324393054271110084140201023);
    X~tpush(426547842461739379460149980002442288124894678853713953114433);
    X~tpush(690168906931029935139391829792095612517948949963798093315456);
    X~tpush(1116716749392769314599541809794537900642843628817512046429889);
    X~tpush(1806885656323799249738933639586633513160792578781310139745345);
    X~tpush(2923602405716568564338475449381171413803636207598822186175234);
    X~tpush(4730488062040367814077409088967804926964428786380132325920579);
    X~tpush(7654090467756936378415884538348976340768064993978954512095813);
    X~tpush(12384578529797304192493293627316781267732493780359086838016392);
    X~tpush(20038668997554240570909178165665757608500558774338041350112205);
    X~tpush(32423247527351544763402471792982538876233052554697128188128597);
    X~tpush(52461916524905785334311649958648296484733611329035169538240802);
    X~tpush(84885164052257330097714121751630835360966663883732297726369399);
    X~tpush(137347080577163115432025771710279131845700275212767467264610201);
    X~tpush(222232244629420445529739893461909967206666939096499764990979600);
    X~tpush(359579325206583560961765665172189099052367214309267232255589801);
    X~tpush(581811569836004006491505558634099066259034153405766997246569401);
    X~tpush(941390895042587567453271223806288165311401367715034229502159202);
    X~tpush(1523202464878591573944776782440387231570435521120801226748728603);
    X~tpush(2464593359921179141398048006246675396881836888835835456250887805);
    X~tpush(3987795824799770715342824788687062628452272409956636682999616408);
    X~tpush(6452389184720949856740872794933738025334109298792472139250504213);
    X~tpush(10440185009520720572083697583620800653786381708749108822250120621);
    X~tpush(16892574194241670428824570378554538679120491007541580961500624834);
    X~tpush(27332759203762391000908267962175339332906872716290689783750745455);
    X~tpush(44225333398004061429732838340729878012027363723832270745251370289);
    X~tpush(71558092601766452430641106302905217344934236440122960529002115744);
    X~tpush(115783425999770513860373944643635095356961600163955231274253486033);
    X~tpush(187341518601536966291015050946540312701895836604078191803255601777);
    X~tpush(303124944601307480151388995590175408058857436768033423077509087810);
    X~tpush(490466463202844446442404046536715720760753273372111614880764689587);
    X~tpush(793591407804151926593793042126891128819610710140145037958273777397);
    X~tpush(1284057871006996373036197088663606849580363983512256652839038466984);
    X~tpush(2077649278811148299629990130790497978399974693652401690797312244381);
    X~tpush(3361707149818144672666187219454104827980338677164658343636350711365);
    X~tpush(5439356428629292972296177350244602806380313370817060034433662955746);
    X~tpush(8801063578447437644962364569698707634360652047981718378070013667111);
    X~tpush(14240420007076730617258541919943310440740965418798778412503676622857);
    X~tpush(23041483585524168262220906489642018075101617466780496790573690289968);
    X~tpush(37281903592600898879479448409585328515842582885579275203077366912825);
    X~tpush(60323387178125067141700354899227346590944200352359771993651057202793);
    X~tpush(97605290770725966021179803308812675106786783237939047196728424115618);
    X~tpush(157928677948851033162880158208040021697730983590298819190379481318411);
    X~tpush(255533968719576999184059961516852696804517766828237866387107905434029);
    X~tpush(413462646668428032346940119724892718502248750418536685577487386752440);
    X~tpush(668996615388005031531000081241745415306766517246774551964595292186469);
    X~tpush(1082459262056433063877940200966638133809015267665311237542082678938909);
    X~tpush(1751455877444438095408940282208383549115781784912085789506677971125378);
    X~tpush(2833915139500871159286880483175021682924797052577397027048760650064287);
    X~tpush(4585371016945309254695820765383405232040578837489482816555438621189665);
    X~tpush(7419286156446180413982701248558426914965375890066879843604199271253952);
    X~tpush(12004657173391489668678522013941832147005954727556362660159637892443617);
    X~tpush(19423943329837670082661223262500259061971330617623242503763837163697569);
    X~tpush(31428600503229159751339745276442091208977285345179605163923475056141186);
    X~tpush(50852543833066829834000968538942350270948615962802847667687312219838755);
    X~tpush(82281144336295989585340713815384441479925901307982452831610787275979941);
    X~tpush(133133688169362819419341682354326791750874517270785300499298099495818696);
    X~tpush(215414832505658809004682396169711233230800418578767753330908886771798637);
    X~tpush(348548520675021628424024078524038024981674935849553053830206986267617333);
    X~tpush(563963353180680437428706474693749258212475354428320807161115873039415970);
    X~tpush(912511873855702065852730553217787283194150290277873860991322859307033303);
    X~tpush(1476475227036382503281437027911536541406625644706194668152438732346449273);
    X~tpush(2388987100892084569134167581129323824600775934984068529143761591653482576);
    X~tpush(3865462327928467072415604609040860366007401579690263197296200323999931849);
    X~tpush(6254449428820551641549772190170184190608177514674331726439961915653414425);
    X~tpush(10119911756749018713965376799211044556615579094364594923736162239653346274);
    X~tpush(16374361185569570355515148989381228747223756609038926650176124155306760699);
    X~tpush(26494272942318589069480525788592273303839335703403521573912286394960106973);
    X~tpush(42868634127888159424995674777973502051063092312442448224088410550266867672);
    X~tpush(69362907070206748494476200566565775354902428015845969798000696945226974645);
    X~tpush(112231541198094907919471875344539277405965520328288418022089107495493842317);
    X~tpush(181594448268301656413948075911105052760867948344134387820089804440720816962);
    X~tpush(293825989466396564333419951255644330166833468672422805842178911936214659279);
    X~tpush(475420437734698220747368027166749382927701417016557193662268716376935476241);
    X~tpush(769246427201094785080787978422393713094534885688979999504447628313150135520);
    X~tpush(1244666864935793005828156005589143096022236302705537193166716344690085611761);
    X~tpush(2013913292136887790908943984011536809116771188394517192671163973003235747281);
    X~tpush(3258580157072680796737099989600679905139007491100054385837880317693321359042);
    X~tpush(5272493449209568587646043973612216714255778679494571578509044290696557106323);
    X~tpush(8531073606282249384383143963212896619394786170594625964346924608389878465365);
    X~tpush(13803567055491817972029187936825113333650564850089197542855968899086435571688);
    X~tpush(22334640661774067356412331900038009953045351020683823507202893507476314037053);
    X~tpush(36138207717265885328441519836863123286695915870773021050058862406562749608741);
    X~tpush(58472848379039952684853851736901133239741266891456844557261755914039063645794);
    X~tpush(94611056096305838013295371573764256526437182762229865607320618320601813254535);

    int i = 0;
    while (i < k) {
      res~tpush(X.at(n - 198 + i));
      i += 1;
    }
    return res;
  }

  int i = 1;
  int prev = 1;
  int cur = 0;
  int x = 0;

  if n == 0 {
    res~tpush(0);
  }

  while (i < n) {
    (cur, prev) = (prev + cur, cur);
    i += 1;
  }

  while (i < n + k) {
    (cur, prev) = (prev + cur, cur);
    res~tpush(cur);
    i += 1;
  }

  return res;
}

const MOD = 1000000007;

(int, int) fast_doubling(int n) inline {

  if n == 0 {
    return (0, 1);
  }

  (int a, int b) = fast_doubling(n / 2);

  int c = 2 * b - a;

  if (c < 0) {
    c += MOD;
  }

  c = (a * c) % MOD;
  int d = (a * a + b * b) % MOD;
  if (n % 2 == 0) {
    return (c, d);
  }
  return (d, c + d);
}

;; (tuple) fibonacci_s (int n, int k) method_id {
;; ;;   tuple x = simple_algo(40, 1);
;; ;;   x~dump();
;;   return with_map(n, k);
;; ;;   return simple_algo(n, k);
;; }

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {

  if (n + k > 371) | (k == 0) {
    return empty_tuple();
  }

  if (n < 45) {
    (int cur, int next) = fast_doubling(n);
    int i = 1;
    tuple res = to_tuple([cur]);

    while (i < k) {
      (cur, next) = (next, cur + next);
      res~tpush(cur);
      i += 1;
    }
    return res;
  } else {
    return with_map(n, k);
  }

}




