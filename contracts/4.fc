{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

int rot_char(int char, int shift) inline {
  if (char > 64) & (char < 91) {
    char = (char - 65 + shift) % 26 + 65;
  } elseif (char > 96) & (char < 123) {
    char = (char - 97 + shift) % 26 + 97;
  }
  return char;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  int char = 0;
  int nshift = shift % 26;
  tuple stack = null();
  tuple resstack = null();

  slice s = text.begin_parse();

  stack~push_back(s);

  while (~ stack.is_null()) {
    s = stack~pop_back();
    builder b = begin_cell();

    repeat (s.slice_bits() / 8) {
      b~store_uint(rot_char(s~load_uint(8), nshift),8);
    }

    resstack~push_back(b);

    if (~ s.slice_refs_empty?()) {
      stack~push_back(s~load_ref().begin_parse());
    }
  }

  if (resstack.is_null()) {
    return begin_cell().end_cell();
  }

  builder res = resstack~pop_back();

  while (~ resstack.is_null()) {
    res = resstack~pop_back().store_ref(res.end_cell());
  }

  return res.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int nshift = -1 * shift;
  return caesar_cipher_encrypt(nshift, text);
}

