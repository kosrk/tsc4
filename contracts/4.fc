{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) inline method_id {
  int char = 0;
  int nshift = shift % 26;
  tuple resstack = null();

  slice s = text.begin_parse();
  if s.slice_bits() < 32 {
    return begin_cell().end_cell();
  }

  int exit = 1;
  while exit {

    builder b = begin_cell();

    while (s.slice_bits() >= 8) {
      char = s~load_uint(8);

      if (char > 64) & (char < 91) {
        char += nshift;
        if char <= 64 {
          char += 26;
        }
        if char >= 91 {
          char -= 26;
        }
      } elseif (char > 96) & (char < 123) {
        char += nshift;
        if char <= 96 {
          char += 26;
        }
        if char >= 123 {
          char -= 26;
        }
      }

      b~store_uint(char,8);
    }

    resstack~push_back(b);

    if (~ s.slice_refs_empty?()) {
      s = s~load_ref().begin_parse();
    } else { exit = 0; }
  };

  if (resstack.is_null()) {
    return begin_cell().end_cell();
  }

  builder res = resstack~pop_back();

  while (~ resstack.is_null()) {
    res = resstack~pop_back().store_ref(res.end_cell());
  }

  return res.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  int nshift = -1 * shift;
  return caesar_cipher_encrypt(nshift, text);
}

